<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="26">
  <Forms>
    <CETrainer Class="TTrainerForm" Encoding="Ascii85">MUKHv!!Qhn)[{Oq6t25,/Ou8q22m#vlUAugTnVdLqm]s]ERDSn56B}swbk((^$;Bazng=HT]q5Pt/hKqxb+lnRmG=#EBGXFEz(2j,lIt16WVv.CpmkwH8o/9NM$.+-lhMhT)uS*oh%oFJ}]G-wLXA6=@_4Mc3J6zJ.unZ(Q{]+a4K2:FRRAypPe;g[h=XNfgakuIRqxPDvH^Y9NJw@%HKy(K09+q#em7n]11u0ubs?t@Im1ze5_ns/ZPnhn@JK/pJx?c6(WNhrg2/;,r_VI;kj</CETrainer>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Step 2"</Description>
      <LastState Value="135" RealAddress="01733CB8"/>
      <VariableType>4 Bytes</VariableType>
      <Address>["Tutorial-i386.exe"+1FD5D0]+480</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Step 2 hook"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(step2,Tutorial-i386.exe,29 D0 89 83 80 04 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

label(step2SubAmount)
registerSymbol(step2SubAmount)

newmem:
code:
  mov edx, [step2SubAmount] // user controlled
  sub eax,edx
  mov [ebx+00000480],eax
  jmp return
step2SubAmount:
  db 0

step2:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(step2)

[DISABLE]

step2:
  db 29 D0 89 83 80 04 00 00

unregistersymbol(step2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Tutorial-i386.exe"+23B7E

"Tutorial-i386.exe"+23B59: 8D 4D F4              -  lea ecx,[ebp-0C]
"Tutorial-i386.exe"+23B5C: E8 5F 99 FE FF        -  call Tutorial-i386.exe+D4C0
"Tutorial-i386.exe"+23B61: E8 6A B4 FE FF        -  call Tutorial-i386.exe+EFD0
"Tutorial-i386.exe"+23B66: 50                    -  push eax
"Tutorial-i386.exe"+23B67: 85 C0                 -  test eax,eax
"Tutorial-i386.exe"+23B69: 75 65                 -  jne Tutorial-i386.exe+23BD0
"Tutorial-i386.exe"+23B6B: B8 05 00 00 00        -  mov eax,00000005
"Tutorial-i386.exe"+23B70: E8 8B AB FE FF        -  call Tutorial-i386.exe+E700
"Tutorial-i386.exe"+23B75: 8D 50 01              -  lea edx,[eax+01]
"Tutorial-i386.exe"+23B78: 8B 83 80 04 00 00     -  mov eax,[ebx+00000480]
// ---------- INJECTING HERE ----------
"Tutorial-i386.exe"+23B7E: 29 D0                 -  sub eax,edx
"Tutorial-i386.exe"+23B80: 89 83 80 04 00 00     -  mov [ebx+00000480],eax
// ---------- DONE INJECTING  ----------
"Tutorial-i386.exe"+23B86: 8D 55 D4              -  lea edx,[ebp-2C]
"Tutorial-i386.exe"+23B89: E8 12 62 01 00        -  call Tutorial-i386.exe+39DA0
"Tutorial-i386.exe"+23B8E: 8B 55 D4              -  mov edx,[ebp-2C]
"Tutorial-i386.exe"+23B91: 8B 83 6C 04 00 00     -  mov eax,[ebx+0000046C]
"Tutorial-i386.exe"+23B97: E8 24 00 07 00        -  call Tutorial-i386.exe+93BC0
"Tutorial-i386.exe"+23B9C: 83 BB 80 04 00 00 00  -  cmp dword ptr [ebx+00000480],00
"Tutorial-i386.exe"+23BA3: 7D 2B                 -  jnl Tutorial-i386.exe+23BD0
"Tutorial-i386.exe"+23BA5: A1 14 02 55 00        -  mov eax,[Tutorial-i386.exe+150214]
"Tutorial-i386.exe"+23BAA: E8 41 56 0F 00        -  call Tutorial-i386.exe+1191F0
"Tutorial-i386.exe"+23BAF: B8 64 00 00 00        -  mov eax,00000064
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Amount to subtract by"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>step2SubAmount</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>--TRAINERGENERATORSTART--
--This is autogenerated code. Changing code in this block will
--get erased and rewritten if you regenerate the trainer code

--Uncomment the following line if this is a Cheat Table format trainer and you don't want CE to show (Tip, save as .CETRAINER alternatively)
--hideAllCEWindows()

RequiredCEVersion=6.7
if (getCEVersion==nil) or (getCEVersion()&lt;RequiredCEVersion) then
  messageDialog('Please install Cheat Engine '..RequiredCEVersion, mtError, mbOK)
  closeCE()
end

getAutoAttachList().add("Tutorial-i386.exe")
gPlaySoundOnAction=false
CETrainer.show()
function AboutClick()
  showMessage(gAboutText)
end
gAboutText=[[This trainer was made by Cheat Engine
www.cheatengine.org]]

function CloseClick()
  --called by the close button onClick event, and when closing the form
  closeCE()
  return caFree --onClick doesn't care, but onClose would like a result
end

--TRAINERGENERATORSTOP--
local mr_step2SubAmount = getAddressList().getMemoryRecordByID(4)
local mr_step2hook = getAddressList().getMemoryRecordByID(3)
local ogcolors = {}

-- could be improved to not create a timer if one already exists but
function flash(control,color,delay,noerror)
  if not inheritsFromControl(control) then
    if noerror then return end -- avoid need for pcall
    error(('%x is not a control and does not have a color!'):format(control), 2)
  end
  delay = delay or 1000 -- default to 1 second
  color = color or 0x0000FF -- default to red

  -- apparently userdata is different each time, who knew.
  local id = ('%s-%s'):format(control.ClassName,control.Name)
  -- store original color if we haven't done so before
  if not ogcolors[id] then ogcolors[id] = control.Color end

  -- change color
  control.Color = color
  -- create timer to reset color to original color
  local tmr = createTimer()
  tmr.OnTimer = function(timer)
    control.Color = ogcolors[id]
    timer.destroy()
  end
  tmr.Interval = delay
end

function validNumber(text)
  -- tonumber defaults to decimal but detecting 0x for hex
  return tonumber(text) ~= nil
end

function CEEdit1KeyUp(sender, key)
  -- only write on enter key, otherwise just use onChange event
  if key ~= VK_RETURN then return end
  -- check based on registered symbol
  local validAddress = getAddressSafe('step2SubAmount') -- nil if not found
  -- check based on allocating script enabled
  local validScript = mr_step2hook.Active -- true if enabled, false if not
  -- really only need 1 check but demonstrating both


  if not validNumber(sender.Text) then
    flash(sender) -- flash red if not valid input
  elseif not (validAddress and validScript) then
    flash(sender, 0xFF0000) -- flash blue if address is not valid
  else -- write to address
    -- memrec value is actually text to better support various types
    mr_step2SubAmount.Value = sender.Text
  end
  return key
end
</LuaScript>
</CheatTable>
